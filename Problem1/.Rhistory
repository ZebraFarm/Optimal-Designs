Time = c(0.030186660507752094 , 0.04163338049693266 , 0.038753664506657515 , 0.04360926849767566 , 0.051439169503282756 ,
0.054562083998462185 , 0.060726813004293945 , 0.06494004200067138 , 0.0728440939928987 ,
0.0766900795060792 , 0.1696038075024262 , 0.2219637390007847 , 0.3456702985058655 ,
0.48609482050233055 , 0.530701550997037 , 0.6202872964931885 , 1.662802721002663 ,
1.4494923920065048 , 1.8992716330030817 , 2.655778387503233 , 7.237992520495027 , 8.431195393495727 ,
8.648513006010035 , 12.061819520997233 , 16.87398622049659 , 20.49313955550315 , 28.518015114001173 ,
28.231548825504433 , 31.013730163009313 , 46.91498305200366 , 75.79721329899621 , 77.30442503849918,
58.751166287496744 , 70.7152766434956 , 114.08555847950629 , 130.33372402199893 , 115.73399712199898 ,
151.08132345700142)
source('~/Documents/Work/UVic/Convex Optimal Designs/Problem1/p1.R', echo=TRUE)
#png(Compute_Time_PY.png)
ggplot(data ,aes(Variables)) +
geom_line(aes(y=Time)) +
labs(y = "Time to Compute (s)",x="# Variables",title = "Compute Time to Find Optimal Design")
Variables = c(11, 21, 31, 41, 51, 61, 71, 81, 91, 101, 201, 301,
401, 501, 601, 701, 801, 901, 1001, 2001, 3001, 4001,
5001, 6001, 7001, 8001, 9001, 10001, 11001, 12001,
13001, 14001, 15001, 16001, 17001, 18001, 19001, 20001)
Time = c(0.030186660507752094 , 0.04163338049693266 , 0.038753664506657515 , 0.04360926849767566 , 0.051439169503282756 ,
0.054562083998462185 , 0.060726813004293945 , 0.06494004200067138 , 0.0728440939928987 ,
0.0766900795060792 , 0.1696038075024262 , 0.2219637390007847 , 0.3456702985058655 ,
0.48609482050233055 , 0.530701550997037 , 0.6202872964931885 , 1.662802721002663 ,
1.4494923920065048 , 1.8992716330030817 , 2.655778387503233 , 7.237992520495027 , 8.431195393495727 ,
8.648513006010035 , 12.061819520997233 , 16.87398622049659 , 20.49313955550315 , 28.518015114001173 ,
28.231548825504433 , 31.013730163009313 , 46.91498305200366 , 75.79721329899621 , 77.30442503849918,
58.751166287496744 , 70.7152766434956 , 114.08555847950629 , 130.33372402199893 , 115.73399712199898 ,
151.08132345700142)
data = data.frame(Variables, Time)
#png(Compute_Time_PY.png)
ggplot(data ,aes(Variables)) +
geom_line(aes(y=Time)) +
labs(y = "Time to Compute (s)",x="# Variables",title = "Compute Time to Find Optimal Design")
library(ggplot2)
Variables = c(11, 21, 31, 41, 51, 61, 71, 81, 91, 101, 201, 301,
401, 501, 601, 701, 801, 901, 1001, 2001, 3001, 4001,
5001, 6001, 7001, 8001, 9001, 10001, 11001, 12001,
13001, 14001, 15001, 16001, 17001, 18001, 19001, 20001)
Time = c(0.02697190900653368 ,0.029171538502851035 ,0.036929621499439236 ,
0.04027800050243968 ,0.05195682650082745 ,0.05451963800442172 ,0.05833950499800267 ,0.06619717000285164 ,
0.07063014149025548 ,0.07857259750016965 ,0.16643397999723675 ,0.21965032099978998 ,0.3459013139945455 ,
0.4819194199953927 ,0.5287114160091733 ,0.6147426664974773 ,1.6689233210054226 ,1.474547154000902 ,
1.9059671340000932 ,2.6462089654960437 ,6.670100283998181 ,7.541288561500551 ,8.567772602000332 ,
12.00296188450011 ,16.771103642000526 ,19.924642544501694 ,26.43999576100032 ,28.182065050998062 ,
30.470153415000823 ,45.49794651250704 ,40.45632495149766 ,47.623486645497906 ,49.118710127004306 ,
62.24688805999904 ,83.7775657999955 ,97.46023610200064 ,91.61077874999319 ,112.32392911150237 )
data = data.frame(Variables, Time)
#png(Compute_Time_PY.png)
ggplot(data ,aes(Variables)) +
geom_line(aes(y=Time)) +
labs(y = "Time to Compute (s)",x="# Variables",title = "Compute Time to Find Optimal Design")
png(Compute_Time_PY.png)
ggplot(data ,aes(Variables)) +
geom_line(aes(y=Time)) +
labs(y = "Time to Compute (s)",x="# Variables",title = "Compute Time to Find Optimal Design")
dev.off()
setwd("~/Documents/Work/UVic/Convex Optimal Designs/Problem1")
Variables = c(11, 21, 31, 41, 51, 61, 71, 81, 91, 101, 201, 301,
401, 501, 601, 701, 801, 901, 1001, 2001, 3001, 4001,
5001, 6001, 7001, 8001, 9001, 10001, 11001, 12001,
13001, 14001, 15001, 16001, 17001, 18001, 19001, 20001)
Time = c(0.02697190900653368 ,0.029171538502851035 ,0.036929621499439236 ,
0.04027800050243968 ,0.05195682650082745 ,0.05451963800442172 ,0.05833950499800267 ,0.06619717000285164 ,
0.07063014149025548 ,0.07857259750016965 ,0.16643397999723675 ,0.21965032099978998 ,0.3459013139945455 ,
0.4819194199953927 ,0.5287114160091733 ,0.6147426664974773 ,1.6689233210054226 ,1.474547154000902 ,
1.9059671340000932 ,2.6462089654960437 ,6.670100283998181 ,7.541288561500551 ,8.567772602000332 ,
12.00296188450011 ,16.771103642000526 ,19.924642544501694 ,26.43999576100032 ,28.182065050998062 ,
30.470153415000823 ,45.49794651250704 ,40.45632495149766 ,47.623486645497906 ,49.118710127004306 ,
62.24688805999904 ,83.7775657999955 ,97.46023610200064 ,91.61077874999319 ,112.32392911150237 )
data = data.frame(Variables, Time)
png(Compute_Time_PY.png)
ggplot(data ,aes(Variables)) +
geom_line(aes(y=Time)) +
labs(y = "Time to Compute (s)",x="# Variables",title = "Compute Time to Find Optimal Design")
dev.off()
png('Compute_Time_PY.png')
ggplot(data ,aes(Variables)) +
geom_line(aes(y=Time)) +
labs(y = "Time to Compute (s)",x="# Variables",title = "Compute Time to Find Optimal Design")
dev.off()
setwd("~/Documents/Work/UVic/Convex Optimal Designs/Problem1")
library(ggplot2)
Variables = c(11, 21, 31, 41, 51, 61, 71, 81, 91, 101, 201, 301,
401, 501, 601, 701, 801, 901, 1001, 2001, 3001, 4001,
5001, 6001, 7001, 8001, 9001, 10001, 11001, 12001,
13001, 14001, 15001, 16001, 17001, 18001, 19001, 20001)
Time = c(0.02697190900653368 ,0.029171538502851035 ,0.036929621499439236 ,
0.04027800050243968 ,0.05195682650082745 ,0.05451963800442172 ,0.05833950499800267 ,0.06619717000285164 ,
0.07063014149025548 ,0.07857259750016965 ,0.16643397999723675 ,0.21965032099978998 ,0.3459013139945455 ,
0.4819194199953927 ,0.5287114160091733 ,0.6147426664974773 ,1.6689233210054226 ,1.474547154000902 ,
1.9059671340000932 ,2.6462089654960437 ,6.670100283998181 ,7.541288561500551 ,8.567772602000332 ,
12.00296188450011 ,16.771103642000526 ,19.924642544501694 ,26.43999576100032 ,28.182065050998062 ,
30.470153415000823 ,45.49794651250704 ,40.45632495149766 ,47.623486645497906 ,49.118710127004306 ,
62.24688805999904 ,83.7775657999955 ,97.46023610200064 ,91.61077874999319 ,112.32392911150237 )
data = data.frame(Variables, Time)
png('Compute_Time_PY.png')
ggplot(data ,aes(Variables)) +
geom_line(aes(y=Time)) +
labs(y = "Time to Compute (s)",x="# Variables",title = "Compute Time to Find Optimal Design")
dev.off()
B = list(3)
c  c(1,2,3)
c = c(1,2,3)
B[[1]] = matrix(1,nrow=3,ncol=3)
B
B[[2]] = matrix(2,nrow=3,ncol=3)
B[[3]] = matrix(3,nrow=3,ncol=3)
B
c * B
c %*% B
c * B[[1]]
c[2] * B[[1]]
c[1] * B[[1]]
c[3] * B[[1]]
library(CVXR)
N = 21
A = list(N)
for (i in 1:N+1){
u_i = -1 + 2 * (i-1) / (N-1)
tmp =  c(1, u_i, u_i^2)
A_i = T(tmp) %*% tmp
A[[i]] = A_i
}
for (i in 1:N+1){
u_i = -1 + 2 * (i-1) / (N-1)
tmp =  c(1, u_i, u_i^2)
A_i = t(tmp) %*% tmp
A[[i]] = A_i
}
A
for (i in 1:N+1){
u_i = -1 + 2 * (i-1) / (N-1)
tmp =  c(1, u_i, u_i^2)
A_i = tmp %*% t(tmp)
A[[i]] = A_i
}
A
# Initializing Variables, Objective, and Constraints
W = Variable(N)
obj = Minimize(- log_det( sum( for(i in 1:N) W[i] * A[[i]] ) ) )
const = c(W >= 0, sum(W) == 1)
# Creating Problem & Solving
prob = Problem(obj, const)
solve(prob)
obj = Minimize(- log_det( sum( for(i in 1:N) W[i] * A[[i]] ) ) )
const = list(W >= 0, sum(W) == 1)
# Creating Problem & Solving
prob = Problem(obj, const)
solve(prob)
ans = solve(prob)
ans$value
ans$getValue()
ans$getValue(prob)
vapply(1:3,function(x) c[x] * B[[x]])
sapply(1:3,function(x) c[x] * B[[x]])
apply(1:3,function(x) c[x] * B[[x]])
fapply(1:3,function(x) c[x] * B[[x]])
sapply(1:3,function(x) c[x] * B[[x]])
lapply(1:3,function(x) c[x] * B[[x]])
D = lapply(1:3,function(x) c[x] * B[[x]])
sum(D)
D = matrix(0,nrow=3,ncol=3)
D
lapply(1:3,function(x) D += c[x] * B[[x]])
lapply(1:3,function(x) D = D + c[x] * B[[x]])
D
p = length(A[[1]])
p
p = nrow(A[[1]])
p
nrow(A[[1]])
A = list(N)
for (i in 1:N+1){
u_i = -1 + 2 * (i-1) / (N-1)
tmp =  c(1, u_i, u_i^2)
A_i = tmp %*% t(tmp)
A[[i]] = A_i
}
A
nrow(A[[1]])
length(A[[1]])
A[[1]]$nrow
View(A)
View(A)
B[[1]]
nrow(B[[1]])
fun <- function(W,A){
N = length(W)
p = nrow(A[[1]])
scaled = lapply(1:N, function(x) W[x] * A[[x]])
ans = matrix(0,nrow = p, ncol = p)
for(i in 1:N)
ans = ans + scaled[[i]]
return(ans)
}
library(CVXR)
N = 21
A = list(N)
for (i in 1:N+1){
u_i = -1 + 2 * (i-1) / (N-1)
tmp =  c(1, u_i, u_i^2)
A_i = tmp %*% t(tmp)
A[[i]] = A_i
}
A
fun <- function(W,A){
N = length(W)
p = nrow(A[[1]])
scaled = lapply(1:N, function(x) W[x] * A[[x]])
ans = matrix(0,nrow = p, ncol = p)
for(i in 1:N)
ans = ans + scaled[[i]]
return(ans)
}
A
N = 21
A = list(N)
for (i in 1:N){
u_i = -1 + 2 * (i-1) / (N-1)
tmp =  c(1, u_i, u_i^2)
A_i = tmp %*% t(tmp)
A[[i]] = A_i
}
A
fun <- function(W,A){
N = length(W)
p = nrow(A[[1]])
scaled = lapply(1:N, function(x) W[x] * A[[x]])
ans = matrix(0,nrow = p, ncol = p)
for(i in 1:N)
ans = ans + scaled[[i]]
return(ans)
}
# Initializing Variables, Objective, and Constraints
W = Variable(N)
obj = Minimize(- log_det( fun(W, A) ) )
const = list(W >= 0, sum(W) == 1)
# Creating Problem & Solving
prob = Problem(obj, const)
ans = solve(prob)
ans$value
ans$status
ans
?solve
ans$getValue(W)
log(10)
det(B[[2]])
det(c %*%B)
det(c %*%B[[1]])
fun <- function(W,A){
N = length(W)
p = nrow(A[[1]])
scaled = lapply(1:N, function(x) W[x] * A[[x]])
sum = matrix(0,nrow = p, ncol = p)
for(i in 1:N)
sum = sum + scaled[[i]]
d_sum = det(sum)
ans = log(d_sum)
return(ans)
}
source('~/Documents/Work/UVic/Convex Optimal Designs/Problem1/p1.R', echo=TRUE)
library(CVXR)
N = 21
A = list(N)
for (i in 1:N){
u_i = -1 + 2 * (i-1) / (N-1)
tmp =  c(1, u_i, u_i^2)
A_i = tmp %*% t(tmp)
A[[i]] = A_i
}
A
fun <- function(W,A){
N = length(W)
p = nrow(A[[1]])
scaled = lapply(1:N, function(x) W[x] * A[[x]])
sum = matrix(0,nrow = p, ncol = p)
for(i in 1:N)
sum = sum + scaled[[i]]
d_sum = det(sum)
ans = log(d_sum)
return(ans)
}
# Initializing Variables, Objective, and Constraints
W = Variable(N)
obj = Minimize(- fun(W, A) )
B = matrix(rnorm(9),nrow=3,ncol=3)
B
det(B)
fun <- function(W,A){
N = length(W)
p = nrow(A[[1]])
scaled = lapply(1:N, function(x) W[x] * A[[x]])
sum = matrix(0,nrow = p, ncol = p)
for(i in 1:N)
sum = sum + scaled[[i]]
#d_sum = det(sum)
#ans = log(d_sum)
return(ans)
}
# Initializing Variables, Objective, and Constraints
W = Variable(N)
obj = Minimize(- log_det(fun(W, A)) )
