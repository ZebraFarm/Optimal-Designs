Methd = "abc"
Methed = "abc"
rm(ls())
rm(Methd)
rm(Methed)
Method = "abc"
length(Method)
len(Method)
size(Method)
nrow(Method)
ncol(Method)
nchar(Method)
clear
library(CVXR)
N = 101
a = -1
b = 1
p = 3
P = 0:p
u_i <- function(i,a,b)
a + (b-a) * (i-1) / (N-1)
A = list(N)
A = lapply(1:N, function(i) A[[i]] = u_i(i,a,b)^P %*% t(u_i(i,a,b)^P))
# Initializing Variables, Objective, and Constraints
W = Variable(N)
obj = Minimize(matrix_frac(diag(3),Reduce('+', lapply(1:N, function(x) W[x] * A[[x]]) ) ) )
const = list(W >= 0, sum(W) == 1)
library(CVXR)
N = 21
a = -1
b = 1
p = 3
P = 0:p
u_i <- function(i,a,b)
a + (b-a) * (i-1) / (N-1)
A = list(N)
A = lapply(1:N, function(i) A[[i]] = u_i(i,a,b)^P %*% t(u_i(i,a,b)^P))
# Initializing Variables, Objective, and Constraints
W = Variable(N)
obj = Minimize(matrix_frac(diag(3),Reduce('+', lapply(1:N, function(x) W[x] * A[[x]]) ) ) )
const = list(W >= 0, sum(W) == 1)
# Creating Problem & Solving
prob = Problem(obj, const)
ans = solve(prob)
obj = Minimize(matrix_frac(diag(3),Reduce('+', lapply(1:N, function(x) W[x] * A[[x]]) ) ) )
A = list(N)
A = lapply(1:N, function(i) A[[i]] = u_i(i,a,b)^P %*% t(u_i(i,a,b)^P))
# Initializing Variables, Objective, and Constraints
W = Variable(N)
obj = Minimize(matrix_frac(diag(3),Reduce('+', lapply(1:N, function(x) W[x] * A[[x]]) ) ) )
N = 21
a = -1
b = 1
p = 3
P = 0:p
u_i <- function(i,a,b)
a + (b-a) * (i-1) / (N-1)
A = list(N)
A = lapply(1:N, function(i) A[[i]] = u_i(i,a,b)^P %*% t(u_i(i,a,b)^P))
# Initializing Variables, Objective, and Constraints
W = Variable(N)
obj = Minimize(matrix_frac(diag(3),Reduce('+', lapply(1:N, function(x) W[x] * A[[x]]) ) ) )
const = list(W >= 0, sum(W) == 1)
# Creating Problem & Solving
prob = Problem(obj, const)
library(CVXR)
N = 21
a = -1
b = 1
p = 3
P = 0:p
u_i <- function(i,a,b)
a + (b-a) * (i-1) / (N-1)
A = list(N)
A = lapply(1:N, function(i) A[[i]] = u_i(i,a,b)^P %*% t(u_i(i,a,b)^P))
# Initializing Variables, Objective, and Constraints
W = Variable(N)
obj = Minimize(matrix_frac(diag(p+1),Reduce('+', lapply(1:N, function(x) W[x] * A[[x]]) ) ) )
const = list(W >= 0, sum(W) == 1)
# Creating Problem & Solving
prob = Problem(obj, const)
ans = solve(prob)
ans
source('~/Documents/Work/UVic/Convex Optimal Designs/Problem3/p3r.R', echo=TRUE)
source('~/Documents/Work/UVic/Convex Optimal Designs/Problem3/p3r.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
data_A <- read.table(file="A-optimal-output.txt",header=T)
data_D <- read.table(file="D-optimal-output.txt",header=T)
png('A-Optimal-Convergance.png')
ggplot(data_A,aes(N)) +
geom_line(aes(y=U_i,colour="U_i")) +
geom_abline(intercept = 0.4575800000000001,slope=0, aes(colour="Asymptote")) +
labs(x = "Number of Variables", y = "U_i", title = "A-Optimal (a = -1, b = 1)") +
ylim(c(0.399,.46)) +
scale_color_manual("", values = c("U_i" = "green", "Asymptote" = "blue"))
library(ggplot2)
data_A <- read.table(file="A-optimal-output.txt",header=T)
data_D <- read.table(file="D-optimal-output.txt",header=T)
png('A-Optimal-Convergance.png')
ggplot(data_A,aes(N)) +
geom_line(aes(y=U_i,colour="U_i")) +
geom_abline(intercept = 0.4575800000000001,slope=0, aes(colour="Asymptote")) +
labs(x = "Number of Variables", y = "U_i", title = "A-Optimal (a = -1, b = 1)") +
ylim(c(0.399,.46)) +
scale_color_manual("", values = c("U_i" = "green", "Asymptote" = "blue"))
dev.off()
png('D-Optimal-Convergance.png')
ggplot(data_D,aes(N)) +
geom_line(aes(y=U_i,colour="U_i")) +
geom_abline(intercept = 0.45248,slope=0, aes(colour="Asymptote")) +
ylim(c(0.399,.46)) +
labs(x = "Number of Variables", y = "U_i", title = "D-Optimal (a = -1, b = 1)") +
scale_color_manual("", values = c("U_i" = "green", "Asymptote" = "blue"))
dev.off()
data_A <- read.table(file="A-optimal-output.txt",header=T)
data_D <- read.table(file="D-optimal-output.txt",header=T)
png('A-Optimal-Convergance.png')
ggplot(data_A,aes(N)) +
geom_line(aes(y=U_i,colour="U_i")) +
geom_abline(intercept = 0.4575800000000001,slope=0, aes(colour="Asymptote")) +
labs(x = "Number of Variables", y = "U_i", title = "A-Optimal (a = -1, b = 1)") +
ylim(c(0.38,.47)) +
scale_color_manual("", values = c("U_i" = "green", "Asymptote" = "blue"))
dev.off()
png('D-Optimal-Convergance.png')
ggplot(data_D,aes(N)) +
geom_line(aes(y=U_i,colour="U_i")) +
geom_abline(intercept = 0.45248,slope=0, aes(colour="Asymptote")) +
ylim(c(0.38,.47)) +
labs(x = "Number of Variables", y = "U_i", title = "D-Optimal (a = -1, b = 1)") +
scale_color_manual("", values = c("U_i" = "green", "Asymptote" = "blue"))
dev.off()
devtools::document()
library(devtools)
library(devtools)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(CVXR)
optimalDesigns <- function(N,
a,
b,
FeasablePoints = NA,
PolyOrder = 3,
A = NA,
c = NA,
Method = "D",
...)
{
if(!is.numeric(N))
return('N must be numeric')
if(!is.numeric(a) || !is.numeric(b) || a > b)
return('a and b must be numeric values where a is smaller than b')
if (!as.numeric(PolyOrder) || PolyOrder < 1)
return('PolyOrder must be numeric, and PolyOrder >= 1')
if(!is.character(Method) || nchar(Method) != 1)
return("Please clarify Method to be used (A,C,D,E)")
if(Method == "C" && nrow(c) == PolyOrder+1)
return('c must be a numeric vector')
if(is.na(FeasablePoints))
FeasablePoints <- function(i,a,b)
a + (b-a) * (i-1) / (N-1)
if(is.na(A))
A = model(N,a,b,PolyOrder,FeasablePoints)
switch(Method,
"A" = A-Optimal(N,A),
"C" = C-Optimal(N,A,c),
"D" = D-Optimal(N,A),
"E" = E-Optimal(N,A),
)
}
InformationMatrix <- function()
source('~/Documents/Work/UVic/Convex Optimal Designs/RPackage/optimaldesign/R/extras.R', echo=TRUE)
InformationMatrix <- function()
{
w = 1
D <- function(w) return(w)
return(D(w))
}
model <- function(N,
a,
b,
PolyOrder,
FeasablePoints)
{
P = 0:PolyOrder
A = lapply(1:N, function(i) A[[i]] = FeasablePoints(i,a,b)^P %*% t(FeasablePoints(i,a,b)^P))
return(A)
}
D_Optimal <- function(N,
A)
{
W = Variable(N)
obj = Minimize(- log_det(Reduce('+', lapply(1:N, function(x) W[x] * A[[x]]) ) ) )
const = list(W >= 0, sum(W) == 1)
# Creating Problem & Solving
prob = Problem(obj, const)
ans = solve(prob)
return(ans)
}
A_Optimal <- function(N,
A)
{
W = Variable(N)
obj = Minimize(matrix_frac(diag(p+1),Reduce('+', lapply(1:N, function(x) W[x] * A[[x]]) ) ) )
const = list(W >= 0, sum(W) == 1)
# Creating Problem & Solving
prob = Problem(obj, const)
ans = solve(prob)
return(ans)
}
C_Optimal <- function(N,
A,
c)
{
W = Variable(N)
obj = Minimize(matrix_frac( c ,Reduce('+', lapply(1:N, function(x) W[x] * A[[x]]) ) ) )
const = list(W >= 0, sum(W) == 1)
# Creating Problem & Solving
prob = Problem(obj, const)
ans = solve(prob)
return(ans)
}
E_Optimal <- function(N,
A)
{
W = Variable(N)
obj = Maximize( lambda_min( Reduce('+', lapply(1:N, function(x) W[x] * A[[x]]) ) ) )
const = list(W >= 0, sum(W) == 1)
# Creating Problem & Solving
prob = Problem(obj, const)
ans = solve(prob)
return(ans)
}
optimalDesigns(21,-1,1,Method = "D")
source('~/Documents/Work/UVic/Convex Optimal Designs/RPackage/optimaldesign/R/main.R', echo=TRUE)
optimalDesigns(21,-1,1,Method = "D")
optimalDesigns(21,-1,1,Method = "D")[[1]]
optimalDesigns(51,-1,1,Method = "D")[[1]]
source('~/Documents/Work/UVic/Convex Optimal Designs/RPackage/optimaldesign/R/main.R', echo=TRUE)
optimalDesigns(51,-1,1,Method = "D")[[1]]
optimalDesigns(11,-1,1,Method = "D")[[1]]
